name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: DownloadSecureFile@1
      name: publicSSH
      displayName: 'Get SSH Key from sercurefile'
      inputs:
        secureFile: 'id_rsa.pub'
        
    - task: TerraformInstaller@0
      displayName: 'Install terraform'
      inputs:
        terraformVersion: '0.12.26'
    - script: 'cd terraform/environments/test && terraform init' 
      displayName: 'terraform init'
    - script:
        cd terraform/environments/test &&
        terraform apply -auto-approve
        -var="public_key_path=$(publicSSH.secureFilePath)"
      displayName: 'terraform apply'
    - script: |
        sudo npm install -g newman
        sudo npm install -g newman-reporter-junitfull
      displayName: 'postman dependencies'
    - script:
        newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/data_validation_test.postman_collection.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReport-data-validation.xml
      displayName: 'run data validation test'
    - script:
        newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/regression_test.postman_collection.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReport-regression.xml
      displayName: 'run regression test'

    - task: PublishTestResults@2
      displayName: 'Publish integrations test'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'JUnitReport*.xml'
        mergeTestResults: true
        testRunTitle: 'publish regression and data validation test results'

    - template: fakeapi.yml
      parameters:
        name: fakerestapi
        path: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
    - template: fakeapi.yml
      parameters:
        name: UITest
        path: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py'

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'resc_env'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: 'eqrtest-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deploy UI Test suite
    environment:
      name:  TESTVM
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get update
                sudo apt-get upgrade -y

                sudo apt-get install python3-pip unzip expect -y
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo dpkg --install google-chrome-stable_current_amd64.deb
                sudo apt install --assume-yes --fix-broken
                pip3 install --user selenium
                wget https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_linux64.zip
                unzip chromedriver*.zip
                sudo mv chromedriver -f /usr/bin
            displayName: Install dependencies for testing UI

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                cd $(Pipeline.Workspace)/drop-UITest
                unzip -o $(Build.BuildId)-UITest.zip
                # mkdir -p ~/logs
                sudo unbuffer python3 login.py | tee -a ~/logs/output.log.txt
                echo wrote log file

            displayName: run seleium test on UI


- stage: AfterDeployment
  jobs:
  - job: PeformanceTest
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        sudo apt-get install unzip -y
        wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.3.zip
        unzip apache-jmeter-5.3.zip
        cd apache-jmeter-5.3/bin
        sudo ln -r -s -f jmeter /usr/bin
      displayName: 'install dependencies'    
    - script: |
        cd $(System.DefaultWorkingDirectory)/automatedtesting/jmeter
        mkdir -p reports
        echo endurance test
        jmeter -n -t EnduranceTest.jmx -l endurance-test-result.csv -e -f -o ./reports/endurance-test
        echo stress test
        jmeter -n -t StressTest.jmx -l stress-test-result.csv -e -f -o ./reports/stress-test
      displayName: 'peformance tests'
    - template: fakeapi.yaml
      parameters:
        name: reports
        path: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/reports'
